{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["/**\n * 网络请求工具\n */\n\n// API基础URL\nconst BASE_URL = 'http://localhost:8080/api';\n\n// 不需要认证的API路径\nconst NO_AUTH_PATHS = [\n  '/auth/login',\n  '/user/register'\n];\n\n// 请求拦截器\nconst requestInterceptor = (config) => {\n  // 提取请求路径\n  const path = config.url.replace(BASE_URL, '');\n  \n  // 判断是否是无需认证的路径\n  const isNoAuthPath = NO_AUTH_PATHS.some(p => path.includes(p));\n  \n  // 从本地存储获取令牌\n  const token = uni.getStorageSync('token');\n  \n  if (token) {\n    // 已登录用户使用Bearer令牌\n    config.header = {\n      ...config.header,\n      'Authorization': `Bearer ${token}`\n    };\n  }\n  \n  return config;\n};\n\n// 响应拦截器\nconst responseInterceptor = (response) => {\n  // 请求成功\n  if (response.statusCode === 200) {\n    const { data } = response;\n    // 后端API状态码处理\n    if (data.code === 200) {\n      return data;\n    } else if (data.code === 401) {\n      // 未授权，跳转到登录页\n      uni.showToast({\n        title: '请先登录',\n        icon: 'none'\n      });\n      uni.navigateTo({\n        url: '/pages/login/login'\n      });\n      return Promise.reject(data);\n    } else {\n      // 其他错误\n      uni.showToast({\n        title: data.message || '请求失败',\n        icon: 'none'\n      });\n      return Promise.reject(data);\n    }\n  } else {\n    // 其他HTTP错误\n    uni.showToast({\n      title: '网络错误: ' + response.statusCode,\n      icon: 'none'\n    });\n    return Promise.reject(response);\n  }\n};\n\n// 封装请求方法\nconst request = (options) => {\n  // 合并选项\n  const mergedOptions = {\n    url: `${BASE_URL}${options.url}`,\n    method: options.method || 'GET',\n    data: options.data,\n    header: {\n      'Content-Type': 'application/json',\n      ...options.header\n    }\n  };\n  \n  // 应用请求拦截器\n  const finalOptions = requestInterceptor(mergedOptions);\n  \n  // 发送请求\n  return new Promise((resolve, reject) => {\n    uni.request({\n      ...finalOptions,\n      success: (response) => {\n        try {\n          const result = responseInterceptor(response);\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        }\n      },\n      fail: (error) => {\n        uni.showToast({\n          title: '网络连接失败',\n          icon: 'none'\n        });\n        reject(error);\n      }\n    });\n  });\n};\n\n// 导出请求方法\nexport default {\n  get: (url, params = {}) => {\n    return request({\n      url,\n      method: 'GET',\n      data: params\n    });\n  },\n  post: (url, data = {}) => {\n    return request({\n      url,\n      method: 'POST',\n      data\n    });\n  },\n  put: (url, data = {}) => {\n    return request({\n      url,\n      method: 'PUT',\n      data\n    });\n  },\n  delete: (url, data = {}) => {\n    return request({\n      url,\n      method: 'DELETE',\n      data\n    });\n  }\n}; "],"names":["uni"],"mappings":";;AAKA,MAAM,WAAW;AAGjB,MAAM,gBAAgB;AAAA,EACpB;AAAA,EACA;AACF;AAGA,MAAM,qBAAqB,CAAC,WAAW;AAErC,QAAM,OAAO,OAAO,IAAI,QAAQ,UAAU,EAAE;AAGvB,gBAAc,KAAK,OAAK,KAAK,SAAS,CAAC,CAAC;AAG7D,QAAM,QAAQA,cAAAA,MAAI,eAAe,OAAO;AAExC,MAAI,OAAO;AAET,WAAO,SAAS;AAAA,MACd,GAAG,OAAO;AAAA,MACV,iBAAiB,UAAU,KAAK;AAAA,IACtC;AAAA,EACG;AAED,SAAO;AACT;AAGA,MAAM,sBAAsB,CAAC,aAAa;AAExC,MAAI,SAAS,eAAe,KAAK;AAC/B,UAAM,EAAE,KAAM,IAAG;AAEjB,QAAI,KAAK,SAAS,KAAK;AACrB,aAAO;AAAA,IACb,WAAe,KAAK,SAAS,KAAK;AAE5BA,oBAAAA,MAAI,UAAU;AAAA,QACZ,OAAO;AAAA,QACP,MAAM;AAAA,MACd,CAAO;AACDA,oBAAAA,MAAI,WAAW;AAAA,QACb,KAAK;AAAA,MACb,CAAO;AACD,aAAO,QAAQ,OAAO,IAAI;AAAA,IAChC,OAAW;AAELA,oBAAAA,MAAI,UAAU;AAAA,QACZ,OAAO,KAAK,WAAW;AAAA,QACvB,MAAM;AAAA,MACd,CAAO;AACD,aAAO,QAAQ,OAAO,IAAI;AAAA,IAC3B;AAAA,EACL,OAAS;AAELA,kBAAAA,MAAI,UAAU;AAAA,MACZ,OAAO,WAAW,SAAS;AAAA,MAC3B,MAAM;AAAA,IACZ,CAAK;AACD,WAAO,QAAQ,OAAO,QAAQ;AAAA,EAC/B;AACH;AAGA,MAAM,UAAU,CAAC,YAAY;AAE3B,QAAM,gBAAgB;AAAA,IACpB,KAAK,GAAG,QAAQ,GAAG,QAAQ,GAAG;AAAA,IAC9B,QAAQ,QAAQ,UAAU;AAAA,IAC1B,MAAM,QAAQ;AAAA,IACd,QAAQ;AAAA,MACN,gBAAgB;AAAA,MAChB,GAAG,QAAQ;AAAA,IACZ;AAAA,EACL;AAGE,QAAM,eAAe,mBAAmB,aAAa;AAGrD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtCA,kBAAAA,MAAI,QAAQ;AAAA,MACV,GAAG;AAAA,MACH,SAAS,CAAC,aAAa;AACrB,YAAI;AACF,gBAAM,SAAS,oBAAoB,QAAQ;AAC3C,kBAAQ,MAAM;AAAA,QACf,SAAQ,OAAO;AACd,iBAAO,KAAK;AAAA,QACb;AAAA,MACF;AAAA,MACD,MAAM,CAAC,UAAU;AACfA,sBAAAA,MAAI,UAAU;AAAA,UACZ,OAAO;AAAA,UACP,MAAM;AAAA,QAChB,CAAS;AACD,eAAO,KAAK;AAAA,MACb;AAAA,IACP,CAAK;AAAA,EACL,CAAG;AACH;AAGA,MAAe,YAAA;AAAA,EACb,KAAK,CAAC,KAAK,SAAS,OAAO;AACzB,WAAO,QAAQ;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,MACR,MAAM;AAAA,IACZ,CAAK;AAAA,EACF;AAAA,EACD,MAAM,CAAC,KAAK,OAAO,OAAO;AACxB,WAAO,QAAQ;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,IACN,CAAK;AAAA,EACF;AAAA,EACD,KAAK,CAAC,KAAK,OAAO,OAAO;AACvB,WAAO,QAAQ;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,IACN,CAAK;AAAA,EACF;AAAA,EACD,QAAQ,CAAC,KAAK,OAAO,OAAO;AAC1B,WAAO,QAAQ;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,IACN,CAAK;AAAA,EACF;AACH;;"}